#!/usr/bin/python

import os
import sys
import getopt
import operator
import itertools

def char_linesep(times = 1):
	return reduce(operator.concat, [os.linesep for i in range(times)]) 

def char_tab(times = 1):
	return reduce(operator.concat, ['\t' for i in range(times)])

if __name__ == "__main__":
	'''Usage: cppgen-class <class-name>'''

	if len(sys.argv) < 2:
		sys.exit("Class name shouldn't be empty.")

	class_name = sys.argv[1]

	header_file_path = class_name.lower() + '.h'
	source_file_path = class_name.lower() + '.cpp'

	if os.path.exists(header_file_path) or os.path.exists(source_file_path):
		sys.exit("File " + header_file_path + " or " + source_file_path +
				" already exists.")
	
	header_file = open(header_file_path, 'w')	
	source_file = open(source_file_path, 'w')

	# Generate header file.

	header_file.write('#ifndef ' + class_name.upper() + '_H' + char_linesep())
	header_file.write('#define ' + class_name.upper() + '_H' + char_linesep(2))
	header_file.write('class ' + class_name + char_linesep())
	header_file.write('{' + char_linesep())
	header_file.write(char_tab() + 'public:' + char_linesep(2))
	header_file.write(char_tab(2) + class_name + '();' + char_linesep())
	header_file.write(char_tab(2) + '~' + class_name + '();' + char_linesep(2))
	header_file.write(char_tab() + 'private:' + char_linesep(2))
	header_file.write('};' + char_linesep(2))
	header_file.write('#endif // ' + class_name.upper() + '_H')

	# Generate source file.

	source_file.write('#include "' + class_name.lower() + '.h"' + char_linesep(2))
	source_file.write(class_name + '::' + class_name + '()' + char_linesep())
	source_file.write('{' + char_linesep() + '}' + char_linesep(2))
	source_file.write(class_name + '::~' + class_name + '()' + char_linesep())
	source_file.write('{' + char_linesep() + '}')

	header_file.close()
	source_file.close()
